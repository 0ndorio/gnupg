
    * improve iobuf by reading more than one byte at once,
      this shoud espceially done for the buffer in the chain.
      Change the buffering to a mbuf like scheme? Need it for PSST anyway.
    * add a way to distinguish between errors and eof in the underflow/flush
      function of iobuf.
    * add checking of armor trailers
    * remove all "Fixmes"

    * enable a SIGSEGV handler while using zlib functions

    * key generation for dsa and subpacket support.

    * Burn the buffers used by fopen(), or use read(2).

    * bug: g10/trustdb.c#build_sigrecs called to often by do_list_path
      and remove the bad kludge. Maybe we should put all sigs into the trustdb
      and mark them as valid/invalid/nopubkey, and how do we check, that
      we have a self-signature -> put this stuff into a kind of directory
      record, as it does not belong to the pubkey record?

    * add an option to create a new user id.
      Make it possible to chnage the signature class of the self-signatures,
      which can then be used to chnage the displayed order of user-ids:
      Put the user-id with a self-signature of class 0x13 always on top
      of the displayed list (needs changes in the user-id-from-keyid
      functions).

    * enhance --sign-key, so that multiple-user-ids can be signed
      (use the new classes 0x14..17)

    * support these multi-user-id-sigs in trustdb.

    * add an option to re-create a public key from a secret key. Think about
      a backup system of only the secret part of the secret key.

    * add fingerprint/keyid hashing. We need a new field in PKC to
      flag that we may have a cached signature for this (and use the address
      of PKC to lookup the hash).

    * change the misleading usage of public key certificate to public key data
      or something like this.

    * fix the problems with "\v" in gettext

    * replace getkey.c#enum_secret_keys

    * add readline support (but how can we allcoate it in secure memory?)

