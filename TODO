
    * add assembler support for more CPUs. (work, but easy)
    * improve iobuf by reading more than one byte at once,
      this shoud espceially done for the buffer in the chain.
    * add a way to difference between errors and eof in the underflow/flush
      function of iobuf.
    * check that all output is filtered when displayed.
    * keyring editing
    * add trust stuff
    * make ttyio.c work (hide passwords etc..)
    * add option file handling.
    * use correct ASN values for DEK encoding
    * add checking of armor trailers
    * add real secure memory
    * look for a way to reuse RSA signatures
    * find a way to remove the armor filter after it
      has detected, that the data is not armored.
    * Use the Chinese Remainder Theorem to speed up RSA calculations.
    * remove all "Fixmes"
    * speed up the RIPE-MD-160
    * add signal handling
    * enable a SIGSEGV handler while using zlib functions

    * PGP writes the signature and then the file, this is not
      a good idea, we can't write such files if we take input from stdin.
      So the solution will: accept such packet, but write
      signature the corret way: first the data and then the signature[s]
      this is much easier to check, also we must read the entire data
      before we can check wether we have the pubkey or not.  The one-pass
      signature packets should be implemented to avoid this.

    * compress does not work always!

