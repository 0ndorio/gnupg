
    * hash calculation for cleartext sigs without a "Hash: xxx" line
      does it work as specified in the RFC?

    * Check Berkeley BD - it is in glibc -any licensing problems?

    * I noticed, that we sometimes have only 3 items in atrustrecord, but
      a next pointer ro more records - check wehther the reuse code really
      works. Maybe this is the reason for the "Hmmm puiblic key lost"

    * Update the keyring at ftp.guug.de

    * expire date is not shown in --edit-key for subkeys.
      and prefs are not correctly listed for some keys???? (Brian)

    * support for mpi/powerpc  split is still combined or whatever

    * add a note, that gettext 10.35 is needed (for gettext) - and install
      it on tobold.

    * use zlib 1.1.13 to avoid a bug with 13 bit windows
      but there are more problems with large files

    * FreeBSD:
	#define USE_DYNAMIC_LINKING
	#define HAVE_DL_DLOPEN
	and the ld option -export-dynamic.

    * clearsig: keep lineendings as they are. Remember that trailings
      blanks are not hashed.

    * Check revocation and expire stuff.

    * check preferences (cipher and compress)

    * OpenBSD: dynamic loading with dlopen works on OpenBSD, but:
	OpenBSD binaries are a.out, so every symbol begins with "_"

    * should we flush the getkey.c caches while doing an import?

    * The critical bit of signature subpackets is not yet supported; i.e.
      it is ignored.

    * We need a maintainence pass over the trustdb which flags
      signatures as expired if the key used to make the signature has
      expired.	Maybe it is a good idea to store the exiration time
      in the key record of the trustdb.

    * write a tool to extract selected keys from a file.

    * new menu to delete signatures and list signature in menu

    * commandline controlled --edit-key with assumed save.

    * -rdynamic auf Solaris Problem

    * Replace the SIGUSR1 stuff by semaphores to avoid loss of a signal.

    * add test cases for invalid data (scrambled armor or other random data)

    * add some sanity checks to read_keyblock, so that we are sure that
     the minimal requirements are met (?)

    * decryption of message with multiple recipients does not work.

    * preferences of hash algorithms are not yet used.

    * rewrite --list-packets or put it into another tool.

    * Burn the buffers used by fopen(), or use read(2). Does this
      really make sense?

    * Change the buffering to a mbuf like scheme? Need it for PSST anyway.
    * add checking of armor trailers
    * remove all "Fixmes"

    * Change the internal represention of keyid into a struct which
      can also hold the localid and extend the localid to hold information
      of the subkey number because two subkeys may have the same keyid.

    * add an option to re-create a public key from a secret key; we
      can do this in trustdb.c:verify_own_keys.

    * signature verification is done duplicated on import: in import.c and
      tehn in trustdb.c too.  Maybe we can use a flag to skip the actual
      verification process (this should work if we use the same keyblock,
      but I'm not sure how to accomplish that).  Another way is to allow
      the import of bogus data and let trustdb mark these keys as invalid;
      I see an advantage in this that it may help to prevent a DoS on a
      keyserver by sending him a lot of bogus signatures which he has
      to check - Needs further investigation.

    * change the fake_data stuff to mpi_set_opaque

    * Is it okay to use gettext for the help system?

    * Add some stuff for DU cc

    * Use "user ID", "trustdb" and "WARNING".

