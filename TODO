
  * add listing of notation data

  * Check the changes to the gpg random gatherer on all W32 platforms.

  * Put a note into readme.w32 that there is a man page and a options
    file;  write the registry stuff in regedit format.

  * Show more info does not work from edit->trust

  * set default charset from nl_langinfo.

  * Check that no secret temporary results are stored in the result parameter
    of the mpi functions.  We have already done this for mpi-mul.c 

  * check whether we can remove all the expire stuff in trustdb because this
    is now done in getkey.  

  * We need another special packet at the end of a clearsign message to mark
    it's end and allow for multiple signature for one message.  And
    add a real grammar to the code in mainproc.c

  * option to set the signature expiration time for key sigs.
    Rework the way we create signature subpackets - the current code
    is not easy to understand.

  * Option to warn when a non MDC message is decrypted?

  * If there is no secure memory, allocate more memory for the secure
    memory block or do it in all cases.

  * add some minor things vor VMS.

  * Don't get the ultimately trusted keys from the secring but store
    it permanently in the trustdb.  This way we don't need a secring at all.
    [ currently solved by re-introducing --trusted-key ]  Eventually we
    will have commands --{add,remove}-trusted-key which keeps them in
    special trustdb records.

  * Use DSA keys with the test suite (partly done)

  * g10/trustdb.c (make_sig_records): fix the fixme.

  * Replace Valid/Invalid by Known/Unknown?

  * Fix the bug in the mips assembler code

  * Add a way to show the fingerprint of an key signator's keys

  * New option --file-remove path-to-wipe-program ?

  * Add an is_valid flag to each user ID.

  * Do not create a secring.gpg if it is not needed; I have fixed this
    sometime ago but it has later reappeared.

  * Check for consistent spelling of user ID, key ID etc.
    Replace "user id not found" in getkey.c by "no valid user ID found".
 
  * Replace the printing of the user name by [self-signature] when
    appropriate so that a key listing does not get clobbered.

  * "Michael T. Babcock" <mbabcock@fibrespeed.net> suggested to write
    an event log so that other software can display a key history or
    alike with GnuPG results.  This should be connected to the keyrings.

  * Using --list-only to check for recipients while decrypting may
    yield an error about an unknown packet.

  * Check that the way we select cipher and digest algorithms w/o
    preferences is okay and make AES the default.

  * Concatenated encryption messages don't work corectly - only the
    first one is processed.

  * Add status message for reasons why a key was not selected.

  * Add option to put the list of recipients (from the encryption
    layer) into the signatures notation data.

Scheduled for 1.1
-----------------
  * export by user-IDs does only export the first matching name which leads
    to a problem in cases where there are 2 keys with identically user-IDs.

  * With option -i prompt before adding a key to the keyring and show some
    info what we are about to add.

  * Speed up calculation of key validation.

  * --disable-asm should still assemble _udiv_qrnnd when needed

  * Skip RO keyrings when importing a key.

  * replace the keyserver stuff either by a call to a specialized
    utility and SOCKSify this utility.

  * Check the beginning of file to detect already compressed files (gzip,
    bzip2, xdelta and some picture formats)

  * Get new assembler stuff from gmp 3.1


Nice to have
------------
  * use DEL and ^H for erasing the previous character (util/ttyio.c).
    or better readline.
  * Print a warning if the directory mode is wrong.
  * Do a real fix for bug #7 or document that it is a PGP 5 error.
  * preferences of hash algorithms are not yet used.
  * Replace the SIGUSR1 stuff by semaphores to avoid loss of a signal.
    or use POSIX.4 realtime signals.  Overhaul the interface and the
    test program.  Use it with the test suite?
  * add test cases for invalid data (scrambled armor or other random data)
  * add checking of armor trailers
  * the pubkey encrypt functions should do some sanity checks.
  * dynload: implement the hint stuff.
  * "gpg filename.tar.gz.asc" should work like --verify (-sab).
  * for messages created with "-t", it might make sense to append the
    verification status of the message to the output (i.e. write something to
    the --output file and not only to stderr.
  * configure option where to find zlib
  * Evaluate whether it make sense to replace the namehashs either by
    using the user ID directly or by using pointers into the trustdb.


